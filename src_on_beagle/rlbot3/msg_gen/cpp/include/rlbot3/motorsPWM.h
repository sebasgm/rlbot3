/* Auto-generated by genmsg_cpp for file /root/ros/rlbot3/msg/motorsPWM.msg */
#ifndef RLBOT3_MESSAGE_MOTORSPWM_H
#define RLBOT3_MESSAGE_MOTORSPWM_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace rlbot3
{
template <class ContainerAllocator>
struct motorsPWM_ {
  typedef motorsPWM_<ContainerAllocator> Type;

  motorsPWM_()
  : pwm_enable(false)
  , pwm_l(0)
  , pwm_r(0)
  {
  }

  motorsPWM_(const ContainerAllocator& _alloc)
  : pwm_enable(false)
  , pwm_l(0)
  , pwm_r(0)
  {
  }

  typedef uint8_t _pwm_enable_type;
  uint8_t pwm_enable;

  typedef uint16_t _pwm_l_type;
  uint16_t pwm_l;

  typedef uint16_t _pwm_r_type;
  uint16_t pwm_r;


  typedef boost::shared_ptr< ::rlbot3::motorsPWM_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rlbot3::motorsPWM_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct motorsPWM
typedef  ::rlbot3::motorsPWM_<std::allocator<void> > motorsPWM;

typedef boost::shared_ptr< ::rlbot3::motorsPWM> motorsPWMPtr;
typedef boost::shared_ptr< ::rlbot3::motorsPWM const> motorsPWMConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::rlbot3::motorsPWM_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::rlbot3::motorsPWM_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace rlbot3

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::rlbot3::motorsPWM_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::rlbot3::motorsPWM_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::rlbot3::motorsPWM_<ContainerAllocator> > {
  static const char* value() 
  {
    return "7b3d28eca08e2b533d7dacc9d4ded039";
  }

  static const char* value(const  ::rlbot3::motorsPWM_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x7b3d28eca08e2b53ULL;
  static const uint64_t static_value2 = 0x3d7dacc9d4ded039ULL;
};

template<class ContainerAllocator>
struct DataType< ::rlbot3::motorsPWM_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rlbot3/motorsPWM";
  }

  static const char* value(const  ::rlbot3::motorsPWM_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::rlbot3::motorsPWM_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool pwm_enable\n\
uint16 pwm_l\n\
uint16 pwm_r\n\
\n\
";
  }

  static const char* value(const  ::rlbot3::motorsPWM_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::rlbot3::motorsPWM_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::rlbot3::motorsPWM_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.pwm_enable);
    stream.next(m.pwm_l);
    stream.next(m.pwm_r);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct motorsPWM_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rlbot3::motorsPWM_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::rlbot3::motorsPWM_<ContainerAllocator> & v) 
  {
    s << indent << "pwm_enable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.pwm_enable);
    s << indent << "pwm_l: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.pwm_l);
    s << indent << "pwm_r: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.pwm_r);
  }
};


} // namespace message_operations
} // namespace ros

#endif // RLBOT3_MESSAGE_MOTORSPWM_H

